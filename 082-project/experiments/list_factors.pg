##DESCRIPTION
##  How to enter simple numbers into WeBWorK
##ENDDESCRIPTION


## DBsubject(Number theory)
## DBchapter(Divisibility)
## DBsection(Prime factorization)
## Date(05/29/2018)
## Institution(SVSU)
## Author(Jan Hlavacek)
## Level(1)
## KEYWORDS('algebra, WeBWorK')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "PGML.pl",
  "MathObjects.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

Context("Numeric");

$a = list_random(2, 3, 5);
$apow = random(2,4,1);
do {$b = list_random(2, 3, 5, 7, 11);} while ($b == $a);
$bpow = random(1,2,1);
do {$c = list_random(3, 5, 7, 11, 13, 17);} while ($c == $a or $c == $b);

$prod = $a**$apow*$b**$bpow*$c;

$ans = List("$a, $b, $c");
$cmp = $ans->cmp(list_checker => sub {
     my ($correct,$student,$ansHash,$value) = @_;
     my %seen;  # remove duplicates from student answer:
     my @student_no_dup = grep { not $seen{$_}++ } @$student;
     my $n = scalar(@$student);  # number of student answers
     my $n_uniq = scalar(@student_no_dup);  # number of unique student answers
     my $n_cor = scalar(@$correct);  # number of correct answers
     my $score = 0;              # number of correct student answers
     my @errors = ();            # stores error messages
     my $i, $j;                  # loop counters

     #
     #  Loop though the student answers
     ##
     for ($i = 0; $i < $n; $i++) {
       my $ith = Value::List->NameForNumber($i+1);
       my $p = $student->[$i];   # i-th student answer
       #
       #  Check that the student's answer is a number
       #
       if ($p->type ne "Number") {
          push(@errors,"Your $ith entry is not a number");
          next;
       }
       #
       #  Check that the number hasn't been given before
       #
       for ($j = 0, $used = 0; $j < $i; $j++) {
         if ($student->[$j]->type eq "Number" && $student->[$j] == $p) {
           push(@errors,"Your $ith entry is a duplicate of a previous one") unless $ansHash->{isPreview};
           $used = 1; last;
         }
       }
       #
       #  If not already used, check that it is a prime and that it divides the
       #  given number, and increase the score if so.
       #
       if (!$used) {
         my $a = $p->value;
         if (!isPrime($a)) {
           push(@errors,"Your $ith number ($a) is not a prime") unless $ansHash->{isPreview};
         } elsif ( $prod % $a != 0 ) {
           push(@errors,"Your $ith number ($a) is does not divide $prod") unless $ansHash->{isPreview};
         } else {$score++}
       }
     }
     #
     #  Check that there are the right number of answers
     #
     if (!$ansHash->{isPreview}) {
       push(@errors,"You did not list all prime factors") if $n_uniq < $n_cor;
       #push(@errors,"You have given too many points") if $score > 3 && $i != $score;
     }
     return ($score,@errors);
   });

BEGIN_PGML

Prime factors of [$prod] are: [________________________]{$cmp}

END_PGML

BEGIN_PGML_SOLUTION
Blah
END_PGML_SOLUTION

ENDDOCUMENT();        # This should be the last executable line in the problem.
